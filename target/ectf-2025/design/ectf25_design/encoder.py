"""
Author: Ben Janis
Date: 2025

This source file is part of an example system for MITRE's 2025 Embedded System CTF
(eCTF). This code is being provided only for educational purposes for the 2025 MITRE
eCTF competition, and may not meet MITRE standards for quality. Use this code at your
own risk!

Copyright: Copyright (c) 2025 The MITRE Corporation
"""

import argparse
from base64 import b64decode
import random
import struct
import json

from Crypto.Hash import HMAC, SHA256
from Crypto.Cipher import AES
from loguru import logger

class Encoder:
    def __init__(self, secrets: bytes):
        """
        You **may not** change the arguments or returns of this function!

        :param secrets: Contents of the secrets file generated by
            ectf25_design.gen_secrets
        """
        # Load the json of the secrets file
        secrets = json.loads(secrets)
        self.root_key = b64decode(secrets["channel_root_key"])

    def encode(self, channel: int, frame: bytes, timestamp: int) -> bytes:
        """The frame encoder function

        This will be called for every frame that needs to be encoded before being
        transmitted by the satellite to all listening TVs

        You **may not** change the arguments or returns of this function!

        :param channel: 32b unsigned channel number. Channel 0 is the emergency
            broadcast that must be decodable by all channels.
        :param frame: Frame to encode. Max frame size is 64 bytes.
        :param timestamp: 64b timestamp to use for encoding. **NOTE**: This value may
            have no relation to the current timestamp, so you should not compare it
            against the current time. The timestamp is guaranteed to strictly
            monotonically increase (always go up) with subsequent calls to encode

        :returns: The encoded frame, which will be sent to the Decoder
        """
        assert len(frame) <= 64

        # derive channel key
        hasher = SHA256.new()
        hasher.update(self.root_key + struct.pack("<I", channel))
        channel_key = hasher.digest()
        assert len(channel_key) == 32
        logger.debug(f"computed channel key: {channel_key}")

        # encrypt frame content
        padded_frame = frame + b"\x00" * (64 - len(frame))
        plaintext = struct.pack("<QII", timestamp, channel, len(frame)) + padded_frame
        assert len(plaintext) == 80
        nonce = random.randbytes(12)
        aes = AES.new(key=channel_key, mode=AES.MODE_CTR, nonce=nonce)
        ciphertext = aes.encrypt(plaintext)
        assert len(ciphertext) == len(plaintext)

        # compute hmac
        padded_nonce = nonce + struct.pack("<I", 0)
        unsigned_frame = struct.pack("<I", channel) + padded_nonce + ciphertext
        logger.debug(f"feeding into hmac: {unsigned_frame}")
        assert len(unsigned_frame) == 100
        hmac = HMAC.new(channel_key, digestmod=SHA256)
        hmac.update(unsigned_frame)
        tag = hmac.digest()
        assert len(tag) == 32

        final_frame = unsigned_frame + tag
        assert len(final_frame) == 132
        return final_frame

def main():
    """A test main to one-shot encode a frame

    This function is only for your convenience and will not be used in the final design.

    After pip-installing, you should be able to call this with:
        python3 -m ectf25_design.encoder path/to/test.secrets 1 "frame to encode" 100
    """
    parser = argparse.ArgumentParser(prog="ectf25_design.encoder")
    parser.add_argument(
        "secrets_file", type=argparse.FileType("rb"), help="Path to the secrets file"
    )
    parser.add_argument("channel", type=int, help="Channel to encode for")
    parser.add_argument("frame", help="Contents of the frame")
    parser.add_argument("timestamp", type=int, help="64b timestamp to use")
    args = parser.parse_args()

    encoder = Encoder(args.secrets_file.read())
    print(repr(encoder.encode(args.channel, args.frame.encode(), args.timestamp)))


if __name__ == "__main__":
    main()
